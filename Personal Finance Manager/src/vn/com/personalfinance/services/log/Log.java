package vn.com.personalfinance.services.log;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DOpt;
import vn.com.personalfinance.services.account.Account;
import vn.com.personalfinance.services.savings.Savings;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.util.Tuple;

@DClass(schema="personalfinancemanagement")
public class Log implements Comparable {
	
	// attribute
	@DAttr(name = "id", id = true, auto = true, type = Type.Integer, length = 5, optional = false, mutable = false)
	private int id;
	private static int idCounter = 0;
	  
	@DAttr(name = "account", type = Type.Domain, length = 15, optional = false)
	@DAssoc(ascName = "account-has-log", role = "log", 
	    ascType = AssocType.One2Many, endType = AssocEndType.Many, 
	    associate = @Associate(type = Account.class, cardMin = 1, cardMax = 1), dependsOn = true)
	private Account account;

	@DAttr(name = "savings", type = Type.Domain, length = 15, optional = false)
	@DAssoc(ascName = "savings-has-log", role = "log", 
	    ascType = AssocType.One2Many, endType = AssocEndType.Many, 
	    associate = @Associate(type = Savings.class, cardMin = 1, cardMax = 1), dependsOn = true)
	private Savings savings;
	
	@DAttr(name = "amount", type = Type.Double, length = 15, optional = true)
	private Double amount;
	
	// constructor
	@DOpt(type=DOpt.Type.ObjectFormConstructor)
	@DOpt(type=DOpt.Type.RequiredConstructor)
	public Log(@AttrRef("account") Account account, 
	    @AttrRef("savings") Savings savings) throws ConstraintViolationException {
	  this(null, account, savings, 0.0);
	}

	@DOpt(type=DOpt.Type.ObjectFormConstructor)
	public Log(@AttrRef("account") Account account, 
		@AttrRef("savings") Savings savings, 
	    @AttrRef("amount") Double amount)
	    throws ConstraintViolationException {
	  this(null, account, savings, amount);
	}

	@DOpt(type=DOpt.Type.DataSourceConstructor)
	public Log(Integer id, Account account, Savings savings, Double amount) throws ConstraintViolationException {
	  this.id = nextID(id);
	  this.account = account;
	  this.savings = savings;
	  this.amount = (amount != null) ? amount.doubleValue() : null;
	}
	
	// setter
	public void setAccount(Account account) {
		this.account = account;
	}

	public void setSavings(Savings savings) {
		this.savings = savings;
	}
	
	public void setAmount(Double amount) {
		this.amount = amount;
	}
	
	// getter
	public int getId() {
		return id;
	}

	public Account getAccount() {
		return account;
	}

	public Savings getSavings() {
		return savings;
	}

	public Double getAmount() {
		return amount;
	}
	
	@Override
	public String toString() {
		return toString(false);
	}

	public String toString(boolean full) {
		if (full)
			return "Log(" + account + "," + savings + ")";
		else
			return "Log(" + getId() + "," + ((account != null) ? account.getId() : "null") + ","
					+ ((savings != null) ? savings.getId() : "null") + ")";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Log other = (Log) obj;
		if (id != other.id)
			return false;
		return true;
	}
	
	
	private static int nextID(Integer currID) {
		if (currID == null) { // generate one
			idCounter++;
			return idCounter;
		} else { // update
			int num;
			num = currID.intValue();

			if (num > idCounter) {
				idCounter = num;
			}
			return currID;
		}
	}
	
	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {
		if (minVal != null && maxVal != null) {
			// check the right attribute
			if (attrib.name().equals("id")) {
				int maxIdVal = (Integer) maxVal;
				if (maxIdVal > idCounter)
					idCounter = maxIdVal;
			}
			// TODO add support for other attributes here
		}
	}
	
	public int compareTo(Object o) {
		if (o == null || (!(o instanceof Log)))
			return -1;

		Log e = (Log) o;

		return this.account.getId().compareTo(e.account.getId());
	}
}
